{"version":3,"sources":["logo.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TRACKS","N_TRACKS","length","AudioGuide","_ref","url","playing","react_default","a","createElement","ReactPlayer_default","pip","height","loop","width","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","togglePlay","i","playBools","Array","fill","state","play","setState","_this2","className","map","index","App_AudioGuide","onClick","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"0JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wNCexC,IAAMC,EAAS,CACb,iDACA,+CACA,iDACA,iDACA,kDAGIC,EAAWD,EAAOE,OAElBC,EAAa,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,IAAKC,EAAPF,EAAOE,QAAP,OACjBC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACYH,IAAKA,EACLM,KAAK,EACLC,OAAQ,EACRC,MAAM,EACNC,MAAO,EACPR,QAASA,KAwCRS,cAnCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFI,WAAa,SAACC,GACZ,IAAIC,EAAY,IAAIC,MAAMzB,GAAU0B,MAAK,GACzCF,EAAUD,IAAMR,EAAKY,MAAMC,KAAKL,GAChCR,EAAKc,SAAS,CAAED,KAAMJ,KARtBT,EAAKY,MAAQ,CACXC,KAAM,EAAC,GAAM,IAHHb,wEAaL,IAAAe,EAAAZ,KACL,OACEZ,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACbzB,EAAAC,EAAAC,cAAA,UAAQuB,UAAU,cAChBzB,EAAAC,EAAAC,cAAA,KAAGuB,UAAU,YAAb,OAEFzB,EAAAC,EAAAC,cAAA,WACIT,EAAOiC,IAAI,SAAC5B,EAAK6B,GAAN,OAAgB3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAY9B,IAAKA,EAAKC,QAASyB,EAAKH,MAAMC,KAAKK,QAE9E3B,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,cAEbhC,EAAOiC,IAAI,SAAC5B,EAAI6B,GAAL,OACT3B,EAAAC,EAAAC,cAAA,UAAQuB,UAAU,wBAAwBI,QAAS,kBAAIL,EAAKR,WAAWW,KACnEA,cA3BAG,IAAMC,WC1BlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzB,QACfmB,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KChEjEC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,cAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,cAAN,sBAEP5B,EAwCV,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEA5DAsB,CAAwBlC,GAGxBD,EAAgBC,MChCxBmC","file":"static/js/main.1510c0ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e359ad39.svg\";","/*global swal*/\n\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport logo from \"./logo.svg\";\nimport Button from \"./Button\";\nimport ReactPlayer from 'react-player'\n\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\n\nconst TRACKS = [\n  \"https://soundcloud.com/user-362770434/audio0-2\",\n  \"https://soundcloud.com/user-362770434/audio1\",\n  \"https://soundcloud.com/user-362770434/audio2-1\",\n  \"https://soundcloud.com/user-362770434/audio3-1\",\n  \"https://soundcloud.com/user-362770434/audio4-1\"\n];\n\nconst N_TRACKS = TRACKS.length;\n\nconst AudioGuide = ({url, playing}) => (\n  <ReactPlayer\n              url={url}\n              pip={false}\n              height={0}\n              loop={true}\n              width={0}\n              playing={playing}\n  />\n);\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      play: [false,false],\n    };\n  }\n\n  togglePlay = (i) => {\n    var playBools = new Array(N_TRACKS).fill(false);\n    playBools[i] = !this.state.play[i];\n    this.setState({ play: playBools });\n  };\n\n  render() {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <p className=\"App-logo\" >H </p>\n          </header>\n          <div>\n          {   TRACKS.map((url, index) => <AudioGuide url={url} playing={this.state.play[index]} />)}\n          </div>\n          <div className=\"App-player\">\n          {\n            TRACKS.map((url,index) =>\n              <button className=\"App-audioguide-sample\" onClick={()=>this.togglePlay(index)}>\n                 {index}\n               </button>\n            )}\n          </div>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}